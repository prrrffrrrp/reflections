                          -- How to use Git and Github --


  - What happens when you initialize a repository? Why do you need to do it?

      When I initialize a repository I can tell Git which files I want to
      commit and Git will start tracking them. It's a good way to keep track of
      the changes introduced in one or more files.

  - How is the staging area different from the working directory and the
    repository? What value do you think it offers?

      The staging area is like a waiting room. You put in there files that are
      going to be commited in the repository. It allows to commit a concrete number of
      files at a time.

  - How can you use the staging area to make sure you have one commit per
    logical change?

      Maybe typing git diff and seing the diffs between the files in the
      working directory and the files in the stage area? I don't know actually.

  - What are some situations when branches would be helpful in keeping your
    history organized? How would branches help?

      They help develop parallell versions of a program.

  - How do the diagrams help you vizualize the branch structure?

      It is a neat maner to represent everything envolved with the version
      control thing. They show the chronology, the branches, the commits...
      Everything!

  - What is the result of merging two branches together? Why do we represent it
    in the diagram the way we do?

     When we merge two branches we merge the history of commits. Instead of
     having two separate paths where on can see the sequence of the logical
     changes, after the commit the two sequences become one and the logs of the
     commits don't necessarily reflect anymore some kind of liniar logic. 
     We represent the merge as a the joining point of two subway routes. If we
     had a more interactive way of showing the result of a merge, the 2 paths
     would shifth towards one each other and would become one all along the
     way.
